Titanic 生存预测项目总结报告

项目周期：Day15–Day18 | 模型：逻辑回归 | 数据集：Kaggle Titanic
作者：Chang｜项目定位：机器学习实战入门基准项目


一、项目背景与目标

泰坦尼克号沉船事故是一场典型的“高风险下的二元决策问题”。目标是基于乘客的基础信息（如性别、年龄、舱位等）预测其是否存活，从而构建一个具备解释力的分类模型。

> 核心任务：根据乘客数据训练一个二分类模型，预测“生存”与“未生存”。


二、项目流程概览

| 阶段       | 关键任务                      | 工具/方法                                                         |
| -------- | ------------------------- | ------------------------------------------------------------- |
| 1. 数据探索  | 缺失值检测、变量类型识别              | Pandas + Matplotlib                                           |
| 2. 可视化分析 | 单变量 + 双变量探索               | Seaborn + pairplot                                            |
| 3. 特征工程  | 缺失值填补、编码、标准化、构造变量         | .fillna()、.map()、get_dummies()、StandardScaler         |
| 4. 模型训练  | 划分训练集/测试集，逻辑回归建模          | LogisticRegression()                                        |
| 5. 模型评估  | 混淆矩阵、准确率、精确率、召回率、F1-score | accuracy_score, confusion_matrix, classification_report |


三、关键特征分析（EDA）

| 特征          | 与生存的相关性 | 观察                       |
| ----------- | ------- | ------------------------ |
| Sex         | 极强      | 女性生存率明显高于男性（75% vs. 19%） |
| Pclass      | 显著      | 头等舱生存率显著高于三等舱            |
| Age         | 中等      | 年轻乘客生存概率更高               |
| SibSp/Parch | 弱相关     | 轻微正相关，但非线性影响较大           |
| Embarked    | 较弱      | 登船港口影响不大，但 C 港生存率略高      |


四、特征工程要点

1. 缺失值处理：

   * Age 使用中位数填补；
   * Embarked 使用众数填补；
   * Cabin 缺失太多，构造布尔特征 HasCabin 替代。

2. 编码处理：

   * Sex: 映射为 0（male）与 1（female）；
   * Embarked: 使用独热编码，保留 Q、S 两列（drop_first=True）。

3. 数值标准化：

   * 使用 StandardScaler 对 Age 和 Fare 两个偏态分布变量标准化处理。


五、模型训练与结果

| 项目   | 方法                                                                                   |
| ---- | ------------------------------------------------------------------------------------ |
| 模型   | LogisticRegression()（默认超参数）                                                        |
| 输入特征 | ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked_Q','Embarked_S','HasCabin'] |
| 数据划分 | 训练集 80%，测试集 20%（random_state=42）                                                    |

### 模型评估结果：

```python
模型准确率：82.12%
混淆矩阵：
[[91 14]
 [18 56]]

分类报告：
              precision    recall  f1-score
Not Survived    0.83       0.87     0.85
Survived        0.80       0.76     0.78
```

> 手动验证结果与 sklearn 输出完全一致，说明理解了混淆矩阵与指标含义：

* Precision（查准率）≈ 0.80
* Recall（查全率）≈ 0.76
* F1-score ≈ 0.78


六、知识总结与迁移价值

| 概念                      | 作用                     | 与机器学习关系               |
| ----------------------- | ---------------------- | --------------------- |
| 逻辑回归                    | 建立线性分类器 + Sigmoid 输出概率 | 是多数分类模型的基础，例如神经网络最后一层 |
| Precision / Recall / F1 | 不同场景下评价模型好坏            | 尤其适用于样本不平衡、医疗/金融等领域   |
| 特征工程                    | 将“人类语言”转为“机器语言”        | 是模型性能优化的第一步，也是建模经验核心  |


七、项目亮点与反思

亮点：

* 严格完成数据清洗与特征转换；
* 自主手算 + sklearn 自动输出双验证模型性能；
* 代码结构清晰，具备可维护性；
* 通过项目学习理解了“统计 + 编程 +模型”三位一体的实战方法。

改进方向：

* 当前模型未做正则化调参，可进一步防止过拟合；
* 可尝试使用决策树/随机森林进行性能对比；
* 增加更多非线性特征（如 Age × Pclass 交叉项）可能提升表现。


九、未来拓展方向建议

| 路线       | 建议                      |
| -------- | ----------------------- |
| 模型优化  | 尝试正则化、网格搜索、K折交叉验证       |
| 模型替代  | 实验随机森林、KNN、SVM 进行对比     |
| 模型解释性 | 使用 SHAP/LIME 理解模型如何做出判断 |
| 自动化管道 | 使用 Pipeline 封装预处理+模型训练  |


十、项目完成自评

| 维度   | 评价                          |
| ---- | --------------------------- |
| 理论掌握 | ⭐⭐⭐⭐（逻辑回归 + 指标评价理解到位）       |
| 技术实践 | ⭐⭐⭐⭐（Pandas + sklearn 使用熟练） |
| 表达能力 | ⭐⭐⭐⭐（已可独立撰写技术报告）            |
| 可迁移性 | ⭐⭐⭐⭐（为房价预测等项目打下基础）          |